// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "10/15/2018 18:23:07"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module part1 (
	SW,
	LEDR);
input 	[1:0] SW;
output 	[2:0] LEDR;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[0]~output_o ;
wire \LEDR[1]~output_o ;
wire \LEDR[2]~output_o ;
wire \SW[0]~input_o ;
wire \SW[1]~input_o ;
wire \dtest|Q0~combout ;
wire \posff|Q1~q ;
wire \negff|Q2~q ;


cyclonev_io_obuf \LEDR[0]~output (
	.i(\dtest|Q0~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
defparam \LEDR[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[1]~output (
	.i(\posff|Q1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[1]~output .bus_hold = "false";
defparam \LEDR[1]~output .open_drain_output = "false";
defparam \LEDR[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[2]~output (
	.i(\negff|Q2~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[2]~output .bus_hold = "false";
defparam \LEDR[2]~output .open_drain_output = "false";
defparam \LEDR[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \dtest|Q0 (
// Equation(s):
// \dtest|Q0~combout  = ( \dtest|Q0~combout  & ( \SW[1]~input_o  & ( \SW[0]~input_o  ) ) ) # ( !\dtest|Q0~combout  & ( \SW[1]~input_o  & ( \SW[0]~input_o  ) ) ) # ( \dtest|Q0~combout  & ( !\SW[1]~input_o  ) )

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\SW[0]~input_o ),
	.datae(!\dtest|Q0~combout ),
	.dataf(!\SW[1]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\dtest|Q0~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \dtest|Q0 .extended_lut = "off";
defparam \dtest|Q0 .lut_mask = 64'h0000FFFF00FF00FF;
defparam \dtest|Q0 .shared_arith = "off";
// synopsys translate_on

dffeas \posff|Q1 (
	.clk(\SW[1]~input_o ),
	.d(\SW[0]~input_o ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\posff|Q1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \posff|Q1 .is_wysiwyg = "true";
defparam \posff|Q1 .power_up = "low";
// synopsys translate_on

dffeas \negff|Q2 (
	.clk(!\SW[1]~input_o ),
	.d(\SW[0]~input_o ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\negff|Q2~q ),
	.prn(vcc));
// synopsys translate_off
defparam \negff|Q2 .is_wysiwyg = "true";
defparam \negff|Q2 .power_up = "low";
// synopsys translate_on

assign LEDR[0] = \LEDR[0]~output_o ;

assign LEDR[1] = \LEDR[1]~output_o ;

assign LEDR[2] = \LEDR[2]~output_o ;

endmodule
