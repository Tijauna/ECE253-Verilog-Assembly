// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "10/22/2018 20:15:41"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module part2 (
	SW,
	LEDR,
	KEY);
input 	[1:0] SW;
output 	[9:0] LEDR;
input 	[0:0] KEY;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[0]~output_o ;
wire \LEDR[1]~output_o ;
wire \LEDR[2]~output_o ;
wire \LEDR[3]~output_o ;
wire \LEDR[4]~output_o ;
wire \LEDR[5]~output_o ;
wire \LEDR[6]~output_o ;
wire \LEDR[7]~output_o ;
wire \LEDR[8]~output_o ;
wire \LEDR[9]~output_o ;
wire \KEY[0]~input_o ;
wire \SW[1]~input_o ;
wire \ns.C~0_combout ;
wire \SW[0]~input_o ;
wire \ps.C~q ;
wire \ns.D~0_combout ;
wire \ps.D~q ;
wire \Selector1~0_combout ;
wire \ps.E~q ;
wire \Selector0~0_combout ;
wire \ps.B~q ;
wire \ns.G~0_combout ;
wire \ps.G~q ;
wire \ns.H~0_combout ;
wire \ps.H~q ;
wire \Selector3~0_combout ;
wire \ps.I~q ;
wire \Selector2~0_combout ;
wire \ps.F~q ;
wire \WideOr2~combout ;
wire \WideOr1~combout ;
wire \WideOr0~combout ;
wire \z~0_combout ;


cyclonev_io_obuf \LEDR[0]~output (
	.i(\WideOr2~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
defparam \LEDR[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[1]~output (
	.i(\WideOr1~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[1]~output .bus_hold = "false";
defparam \LEDR[1]~output .open_drain_output = "false";
defparam \LEDR[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[2]~output (
	.i(\WideOr0~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[2]~output .bus_hold = "false";
defparam \LEDR[2]~output .open_drain_output = "false";
defparam \LEDR[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[3]~output (
	.i(\ps.I~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[3]~output .bus_hold = "false";
defparam \LEDR[3]~output .open_drain_output = "false";
defparam \LEDR[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[4]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[4]~output .bus_hold = "false";
defparam \LEDR[4]~output .open_drain_output = "false";
defparam \LEDR[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[5]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[5]~output .bus_hold = "false";
defparam \LEDR[5]~output .open_drain_output = "false";
defparam \LEDR[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[6]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[6]~output .bus_hold = "false";
defparam \LEDR[6]~output .open_drain_output = "false";
defparam \LEDR[6]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[7]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[7]~output .bus_hold = "false";
defparam \LEDR[7]~output .open_drain_output = "false";
defparam \LEDR[7]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[8]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[8]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[8]~output .bus_hold = "false";
defparam \LEDR[8]~output .open_drain_output = "false";
defparam \LEDR[8]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[9]~output (
	.i(\z~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[9]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[9]~output .bus_hold = "false";
defparam \LEDR[9]~output .open_drain_output = "false";
defparam \LEDR[9]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \KEY[0]~input (
	.i(KEY[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\KEY[0]~input_o ));
// synopsys translate_off
defparam \KEY[0]~input .bus_hold = "false";
defparam \KEY[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \ns.C~0 (
// Equation(s):
// \ns.C~0_combout  = (\ps.B~q  & !\SW[1]~input_o )

	.dataa(!\ps.B~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ns.C~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ns.C~0 .extended_lut = "off";
defparam \ns.C~0 .lut_mask = 64'h4444444444444444;
defparam \ns.C~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \ps.C (
	.clk(\KEY[0]~input_o ),
	.d(\ns.C~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.C~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.C .is_wysiwyg = "true";
defparam \ps.C .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \ns.D~0 (
// Equation(s):
// \ns.D~0_combout  = (\ps.C~q  & !\SW[1]~input_o )

	.dataa(!\ps.C~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ns.D~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ns.D~0 .extended_lut = "off";
defparam \ns.D~0 .lut_mask = 64'h4444444444444444;
defparam \ns.D~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.D (
	.clk(\KEY[0]~input_o ),
	.d(\ns.D~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.D~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.D .is_wysiwyg = "true";
defparam \ps.D .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \Selector1~0 (
// Equation(s):
// \Selector1~0_combout  = (!\SW[1]~input_o  & ((\ps.E~q ) # (\ps.D~q )))

	.dataa(!\ps.D~q ),
	.datab(!\ps.E~q ),
	.datac(!\SW[1]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Selector1~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Selector1~0 .extended_lut = "off";
defparam \Selector1~0 .lut_mask = 64'h7070707070707070;
defparam \Selector1~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.E (
	.clk(\KEY[0]~input_o ),
	.d(\Selector1~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.E~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.E .is_wysiwyg = "true";
defparam \ps.E .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \Selector0~0 (
// Equation(s):
// \Selector0~0_combout  = ( !\SW[1]~input_o  & ( (!\ps.B~q  & (!\ps.D~q  & (!\ps.C~q  & !\ps.E~q ))) ) )

	.dataa(!\ps.B~q ),
	.datab(!\ps.D~q ),
	.datac(!\ps.C~q ),
	.datad(!\ps.E~q ),
	.datae(!\SW[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Selector0~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Selector0~0 .extended_lut = "off";
defparam \Selector0~0 .lut_mask = 64'h8000000080000000;
defparam \Selector0~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.B (
	.clk(\KEY[0]~input_o ),
	.d(\Selector0~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.B~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.B .is_wysiwyg = "true";
defparam \ps.B .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \ns.G~0 (
// Equation(s):
// \ns.G~0_combout  = (\ps.F~q  & \SW[1]~input_o )

	.dataa(!\ps.F~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ns.G~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ns.G~0 .extended_lut = "off";
defparam \ns.G~0 .lut_mask = 64'h1111111111111111;
defparam \ns.G~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.G (
	.clk(\KEY[0]~input_o ),
	.d(\ns.G~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.G~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.G .is_wysiwyg = "true";
defparam \ps.G .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \ns.H~0 (
// Equation(s):
// \ns.H~0_combout  = (\ps.G~q  & \SW[1]~input_o )

	.dataa(!\ps.G~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ns.H~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ns.H~0 .extended_lut = "off";
defparam \ns.H~0 .lut_mask = 64'h1111111111111111;
defparam \ns.H~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.H (
	.clk(\KEY[0]~input_o ),
	.d(\ns.H~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.H~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.H .is_wysiwyg = "true";
defparam \ps.H .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \Selector3~0 (
// Equation(s):
// \Selector3~0_combout  = (\SW[1]~input_o  & ((\ps.I~q ) # (\ps.H~q )))

	.dataa(!\ps.H~q ),
	.datab(!\ps.I~q ),
	.datac(!\SW[1]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Selector3~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Selector3~0 .extended_lut = "off";
defparam \Selector3~0 .lut_mask = 64'h0707070707070707;
defparam \Selector3~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.I (
	.clk(\KEY[0]~input_o ),
	.d(\Selector3~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.I~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.I .is_wysiwyg = "true";
defparam \ps.I .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \Selector2~0 (
// Equation(s):
// \Selector2~0_combout  = ( \SW[1]~input_o  & ( (!\ps.F~q  & (!\ps.H~q  & (!\ps.G~q  & !\ps.I~q ))) ) )

	.dataa(!\ps.F~q ),
	.datab(!\ps.H~q ),
	.datac(!\ps.G~q ),
	.datad(!\ps.I~q ),
	.datae(!\SW[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Selector2~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Selector2~0 .extended_lut = "off";
defparam \Selector2~0 .lut_mask = 64'h0000800000008000;
defparam \Selector2~0 .shared_arith = "off";
// synopsys translate_on

dffeas \ps.F (
	.clk(\KEY[0]~input_o ),
	.d(\Selector2~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ps.F~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ps.F .is_wysiwyg = "true";
defparam \ps.F .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb WideOr2(
// Equation(s):
// \WideOr2~combout  = (((\ps.H~q ) # (\ps.F~q )) # (\ps.D~q )) # (\ps.B~q )

	.dataa(!\ps.B~q ),
	.datab(!\ps.D~q ),
	.datac(!\ps.F~q ),
	.datad(!\ps.H~q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr2~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam WideOr2.extended_lut = "off";
defparam WideOr2.lut_mask = 64'h7FFF7FFF7FFF7FFF;
defparam WideOr2.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb WideOr1(
// Equation(s):
// \WideOr1~combout  = (((\ps.G~q ) # (\ps.C~q )) # (\ps.H~q )) # (\ps.D~q )

	.dataa(!\ps.D~q ),
	.datab(!\ps.H~q ),
	.datac(!\ps.C~q ),
	.datad(!\ps.G~q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr1~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam WideOr1.extended_lut = "off";
defparam WideOr1.lut_mask = 64'h7FFF7FFF7FFF7FFF;
defparam WideOr1.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb WideOr0(
// Equation(s):
// \WideOr0~combout  = (((\ps.E~q ) # (\ps.G~q )) # (\ps.H~q )) # (\ps.F~q )

	.dataa(!\ps.F~q ),
	.datab(!\ps.H~q ),
	.datac(!\ps.G~q ),
	.datad(!\ps.E~q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr0~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam WideOr0.extended_lut = "off";
defparam WideOr0.lut_mask = 64'h7FFF7FFF7FFF7FFF;
defparam WideOr0.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \z~0 (
// Equation(s):
// \z~0_combout  = (\ps.I~q ) # (\ps.E~q )

	.dataa(!\ps.E~q ),
	.datab(!\ps.I~q ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\z~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \z~0 .extended_lut = "off";
defparam \z~0 .lut_mask = 64'h7777777777777777;
defparam \z~0 .shared_arith = "off";
// synopsys translate_on

assign LEDR[0] = \LEDR[0]~output_o ;

assign LEDR[1] = \LEDR[1]~output_o ;

assign LEDR[2] = \LEDR[2]~output_o ;

assign LEDR[3] = \LEDR[3]~output_o ;

assign LEDR[4] = \LEDR[4]~output_o ;

assign LEDR[5] = \LEDR[5]~output_o ;

assign LEDR[6] = \LEDR[6]~output_o ;

assign LEDR[7] = \LEDR[7]~output_o ;

assign LEDR[8] = \LEDR[8]~output_o ;

assign LEDR[9] = \LEDR[9]~output_o ;

endmodule
