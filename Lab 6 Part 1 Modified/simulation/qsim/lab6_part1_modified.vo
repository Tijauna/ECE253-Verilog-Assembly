// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "10/22/2018 19:41:19"

// 
// Device: Altera 5CSEMA6F31C7 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module part1 (
	SW,
	LEDR,
	KEY);
input 	[1:0] SW;
output 	[9:0] LEDR;
input 	[0:0] KEY;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[0]~output_o ;
wire \LEDR[1]~output_o ;
wire \LEDR[2]~output_o ;
wire \LEDR[3]~output_o ;
wire \LEDR[4]~output_o ;
wire \LEDR[5]~output_o ;
wire \LEDR[6]~output_o ;
wire \LEDR[7]~output_o ;
wire \LEDR[8]~output_o ;
wire \LEDR[9]~output_o ;
wire \KEY[0]~input_o ;
wire \SW[1]~input_o ;
wire \SW[0]~input_o ;
wire \f2|output1~q ;
wire \f3|output1~q ;
wire \state_next[4]~1_combout ;
wire \f4|output1~q ;
wire \state_next[5]~2_combout ;
wire \f5|output1~q ;
wire \f6|output1~q ;
wire \f7|output1~q ;
wire \state_next[8]~3_combout ;
wire \f8|output1~q ;
wire \state_next[1]~0_combout ;
wire \f1|output1~q ;
wire \z~0_combout ;
wire \z~1_combout ;
wire [8:0] state_next;


cyclonev_io_obuf \LEDR[0]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
defparam \LEDR[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[1]~output (
	.i(\f1|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[1]~output .bus_hold = "false";
defparam \LEDR[1]~output .open_drain_output = "false";
defparam \LEDR[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[2]~output (
	.i(\f2|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[2]~output .bus_hold = "false";
defparam \LEDR[2]~output .open_drain_output = "false";
defparam \LEDR[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[3]~output (
	.i(\f3|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[3]~output .bus_hold = "false";
defparam \LEDR[3]~output .open_drain_output = "false";
defparam \LEDR[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[4]~output (
	.i(\f4|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[4]~output .bus_hold = "false";
defparam \LEDR[4]~output .open_drain_output = "false";
defparam \LEDR[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[5]~output (
	.i(\f5|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[5]~output .bus_hold = "false";
defparam \LEDR[5]~output .open_drain_output = "false";
defparam \LEDR[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[6]~output (
	.i(\f6|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[6]~output .bus_hold = "false";
defparam \LEDR[6]~output .open_drain_output = "false";
defparam \LEDR[6]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[7]~output (
	.i(\f7|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[7]~output .bus_hold = "false";
defparam \LEDR[7]~output .open_drain_output = "false";
defparam \LEDR[7]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[8]~output (
	.i(\f8|output1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[8]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[8]~output .bus_hold = "false";
defparam \LEDR[8]~output .open_drain_output = "false";
defparam \LEDR[8]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[9]~output (
	.i(\z~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[9]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[9]~output .bus_hold = "false";
defparam \LEDR[9]~output .open_drain_output = "false";
defparam \LEDR[9]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \KEY[0]~input (
	.i(KEY[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\KEY[0]~input_o ));
// synopsys translate_off
defparam \KEY[0]~input .bus_hold = "false";
defparam \KEY[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \state_next[2] (
// Equation(s):
// state_next[2] = (\f1|output1~q  & !\SW[1]~input_o )

	.dataa(!\f1|output1~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(state_next[2]),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[2] .extended_lut = "off";
defparam \state_next[2] .lut_mask = 64'h4444444444444444;
defparam \state_next[2] .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \f2|output1 (
	.clk(\KEY[0]~input_o ),
	.d(state_next[2]),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f2|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f2|output1 .is_wysiwyg = "true";
defparam \f2|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[3] (
// Equation(s):
// state_next[3] = (\f2|output1~q  & !\SW[1]~input_o )

	.dataa(!\f2|output1~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(state_next[3]),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[3] .extended_lut = "off";
defparam \state_next[3] .lut_mask = 64'h4444444444444444;
defparam \state_next[3] .shared_arith = "off";
// synopsys translate_on

dffeas \f3|output1 (
	.clk(\KEY[0]~input_o ),
	.d(state_next[3]),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f3|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f3|output1 .is_wysiwyg = "true";
defparam \f3|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[4]~1 (
// Equation(s):
// \state_next[4]~1_combout  = (!\SW[1]~input_o  & ((\f4|output1~q ) # (\f3|output1~q )))

	.dataa(!\f3|output1~q ),
	.datab(!\f4|output1~q ),
	.datac(!\SW[1]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state_next[4]~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[4]~1 .extended_lut = "off";
defparam \state_next[4]~1 .lut_mask = 64'h7070707070707070;
defparam \state_next[4]~1 .shared_arith = "off";
// synopsys translate_on

dffeas \f4|output1 (
	.clk(\KEY[0]~input_o ),
	.d(\state_next[4]~1_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f4|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f4|output1 .is_wysiwyg = "true";
defparam \f4|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[5]~2 (
// Equation(s):
// \state_next[5]~2_combout  = ( \SW[1]~input_o  & ( (((\f4|output1~q ) # (\f3|output1~q )) # (\f2|output1~q )) # (\f1|output1~q ) ) )

	.dataa(!\f1|output1~q ),
	.datab(!\f2|output1~q ),
	.datac(!\f3|output1~q ),
	.datad(!\f4|output1~q ),
	.datae(!\SW[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state_next[5]~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[5]~2 .extended_lut = "off";
defparam \state_next[5]~2 .lut_mask = 64'h00007FFF00007FFF;
defparam \state_next[5]~2 .shared_arith = "off";
// synopsys translate_on

dffeas \f5|output1 (
	.clk(\KEY[0]~input_o ),
	.d(\state_next[5]~2_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f5|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f5|output1 .is_wysiwyg = "true";
defparam \f5|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[6] (
// Equation(s):
// state_next[6] = (\f5|output1~q  & \SW[1]~input_o )

	.dataa(!\f5|output1~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(state_next[6]),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[6] .extended_lut = "off";
defparam \state_next[6] .lut_mask = 64'h1111111111111111;
defparam \state_next[6] .shared_arith = "off";
// synopsys translate_on

dffeas \f6|output1 (
	.clk(\KEY[0]~input_o ),
	.d(state_next[6]),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f6|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f6|output1 .is_wysiwyg = "true";
defparam \f6|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[7] (
// Equation(s):
// state_next[7] = (\f6|output1~q  & \SW[1]~input_o )

	.dataa(!\f6|output1~q ),
	.datab(!\SW[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(state_next[7]),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[7] .extended_lut = "off";
defparam \state_next[7] .lut_mask = 64'h1111111111111111;
defparam \state_next[7] .shared_arith = "off";
// synopsys translate_on

dffeas \f7|output1 (
	.clk(\KEY[0]~input_o ),
	.d(state_next[7]),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f7|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f7|output1 .is_wysiwyg = "true";
defparam \f7|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[8]~3 (
// Equation(s):
// \state_next[8]~3_combout  = (\SW[1]~input_o  & ((\f8|output1~q ) # (\f7|output1~q )))

	.dataa(!\f7|output1~q ),
	.datab(!\f8|output1~q ),
	.datac(!\SW[1]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state_next[8]~3_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[8]~3 .extended_lut = "off";
defparam \state_next[8]~3 .lut_mask = 64'h0707070707070707;
defparam \state_next[8]~3 .shared_arith = "off";
// synopsys translate_on

dffeas \f8|output1 (
	.clk(\KEY[0]~input_o ),
	.d(\state_next[8]~3_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f8|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f8|output1 .is_wysiwyg = "true";
defparam \f8|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state_next[1]~0 (
// Equation(s):
// \state_next[1]~0_combout  = ( !\SW[1]~input_o  & ( (((\f8|output1~q ) # (\f7|output1~q )) # (\f6|output1~q )) # (\f5|output1~q ) ) )

	.dataa(!\f5|output1~q ),
	.datab(!\f6|output1~q ),
	.datac(!\f7|output1~q ),
	.datad(!\f8|output1~q ),
	.datae(!\SW[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state_next[1]~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state_next[1]~0 .extended_lut = "off";
defparam \state_next[1]~0 .lut_mask = 64'h7FFF00007FFF0000;
defparam \state_next[1]~0 .shared_arith = "off";
// synopsys translate_on

dffeas \f1|output1 (
	.clk(\KEY[0]~input_o ),
	.d(\state_next[1]~0_combout ),
	.asdata(vcc),
	.clrn(\SW[0]~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\f1|output1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \f1|output1 .is_wysiwyg = "true";
defparam \f1|output1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \z~0 (
// Equation(s):
// \z~0_combout  = ( \f8|output1~q  & ( (!\f1|output1~q  & (!\f2|output1~q  & (!\f3|output1~q  & !\f4|output1~q ))) ) ) # ( !\f8|output1~q  & ( (!\f1|output1~q  & (!\f2|output1~q  & (!\f3|output1~q  & \f4|output1~q ))) ) )

	.dataa(!\f1|output1~q ),
	.datab(!\f2|output1~q ),
	.datac(!\f3|output1~q ),
	.datad(!\f4|output1~q ),
	.datae(!\f8|output1~q ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\z~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \z~0 .extended_lut = "off";
defparam \z~0 .lut_mask = 64'h0080800000808000;
defparam \z~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \z~1 (
// Equation(s):
// \z~1_combout  = (!\f5|output1~q  & (!\f6|output1~q  & (!\f7|output1~q  & \z~0_combout )))

	.dataa(!\f5|output1~q ),
	.datab(!\f6|output1~q ),
	.datac(!\f7|output1~q ),
	.datad(!\z~0_combout ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\z~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \z~1 .extended_lut = "off";
defparam \z~1 .lut_mask = 64'h0080008000800080;
defparam \z~1 .shared_arith = "off";
// synopsys translate_on

assign LEDR[0] = \LEDR[0]~output_o ;

assign LEDR[1] = \LEDR[1]~output_o ;

assign LEDR[2] = \LEDR[2]~output_o ;

assign LEDR[3] = \LEDR[3]~output_o ;

assign LEDR[4] = \LEDR[4]~output_o ;

assign LEDR[5] = \LEDR[5]~output_o ;

assign LEDR[6] = \LEDR[6]~output_o ;

assign LEDR[7] = \LEDR[7]~output_o ;

assign LEDR[8] = \LEDR[8]~output_o ;

assign LEDR[9] = \LEDR[9]~output_o ;

endmodule
